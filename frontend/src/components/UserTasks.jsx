import { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import Navbar from './Navbar'; 
import TaskDetailModal from '../components/modals/TaskDetailModal';
import { useLocation } from 'react-router-dom';

const priorityOptions = ['All', 'low', 'medium', 'high'];
const statusOptions = ['All', 'pending', 'in-progress', 'completed'];

const getStatusClasses = (status) => {
Â  Â  switch (status) {
Â  Â  Â  Â  case 'completed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
Â  Â  Â  Â  case 'in-progress': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
Â  Â  Â  Â  case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
Â  Â  Â  Â  default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
Â  Â  }
};

const getPriorityClasses = (priority) => {
Â  Â  switch (priority) {
Â  Â  Â  Â  case 'high': return 'text-red-600 font-bold';
Â  Â  Â  Â  case 'medium': return 'text-orange-500';
Â  Â  Â  Â  case 'low': return 'text-green-500';
Â  Â  Â  Â  default: return 'text-gray-500';
Â  Â  }
};

const getSafeUser = () => {
Â  Â  const defaultUser = { id: null, name: "Guest" };
Â  Â  const userString = localStorage.getItem("taskUser");

Â  Â  if (!userString) return defaultUser;

Â  Â  try {
Â  Â  Â  Â  return JSON.parse(userString);
Â  Â  } catch (e) {
Â  Â  Â  Â  console.error("Local storage 'taskUser' is corrupted:", e);
Â  Â  Â  Â  return defaultUser;
Â  Â  }
};

const UserTasks = ({ 
Â  Â  backendUrl,
    // Removed initialPriority, initialStatus, initialDueDate props as they are now read from router state
}) => {
    // ðŸŽ¯ NEW HOOK USAGE ðŸŽ¯
    const location = useLocation();
    const passedState = location.state || {}; // State passed from Dashboard

Â  Â  const [tasks, setTasks] = useState([]);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  
Â  Â  // ðŸŽ¯ CHANGE: Initialize filter status from router state ðŸŽ¯
Â  Â  const [filterPriority, setFilterPriority] = useState(passedState.initialPriority || 'All');
Â  Â  const [filterStatus, setFilterStatus] = useState(passedState.initialStatus || 'All');
Â  Â  const [filterDueDate, setFilterDueDate] = useState(passedState.initialDueDate || '');
    
    // Note: Due to React's lifecycle, on subsequent visits, filter states might 
    // retain the previous value. If you want the filter to ONLY apply on the first 
    // click and then be manually controllable, this initialization is correct.
    // To ensure the filter resets on EVERY /tasks page load, we use the key in App.jsx.

Â  Â  // Modal States
Â  Â  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
Â  Â  const [selectedTask, setSelectedTask] = useState(null);

Â  Â  const user = getSafeUser();

Â  Â  // Use useCallback to memoize the fetch function
Â  Â  const fetchTasks = useCallback(async () => {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  if (!user.id) {
Â  Â  Â  Â  Â  Â  setError("User not authenticated or ID is missing.");
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // Updated API call to fetch tasks associated with the user ID
Â  Â  Â  Â  Â  Â  const res = await axios.get(`${backendUrl}/auth/tasks?id=${user.id}`);
Â  Â  Â  Â  Â  Â  console.log(res.data);
Â  Â  Â  Â  Â  Â  // The response data is expected to be the array of tasks
Â  Â  Â  Â  Â  Â  setTasks(res.data);
Â  Â  Â  Â  } catch(err) {
Â  Â  Â  Â  Â  Â  console.error("Error fetching user tasks:", err);
Â  Â  Â  Â  Â  Â  setError("Failed to fetch tasks. Please check the network or backend connection.");
Â  Â  Â  Â  Â  Â  setTasks([]);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  }, [backendUrl, user.id]);

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchTasks();
Â  Â  }, [fetchTasks]); 

Â  Â  // HANDLERS FOR TASK DETAIL MODAL
Â  Â  const openDetailModal = (task) => {
Â  Â  Â  Â  setSelectedTask(task);
Â  Â  Â  Â  setIsDetailModalOpen(true);
Â  Â  };

Â  Â  const closeDetailModal = (shouldRefresh = false) => {
Â  Â  Â  Â  setSelectedTask(null);
Â  Â  Â  Â  setIsDetailModalOpen(false);
Â  Â  Â  Â  if (shouldRefresh) {
Â  Â  Â  Â  Â  Â  fetchTasks(); // Re-fetch tasks if the modal indicates a change (e.g., delete/update)
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // --- Filtering Logic ---
Â  Â  const filteredTasks = useMemo(() => {
Â  Â  Â  Â  let currentTasks = Array.isArray(tasks) ? tasks : [];

Â  Â  Â  Â  // 1. Filter by Status
Â  Â  Â  Â  if (filterStatus !== 'All') {
Â  Â  Â  Â  Â  Â  currentTasks = currentTasks.filter(task => task.status === filterStatus);
Â  Â  Â  Â  }

Â  Â  Â  Â  // 2. Filter by Priority
Â  Â  Â  Â  if (filterPriority !== 'All') {
Â  Â  Â  Â  Â  Â  currentTasks = currentTasks.filter(task => task.priority === filterPriority);
Â  Â  Â  Â  }

Â  Â  Â  Â  // 3. Filter by Due Date
Â  Â  Â  Â  if (filterDueDate) {
Â  Â  Â  Â  Â  Â  const selectedDate = new Date(filterDueDate);
Â  Â  Â  Â  Â  Â  currentTasks = currentTasks.filter(task => {
Â  Â  Â  Â  Â  Â  Â  Â  const taskDueDate = new Date(task.dueDate);
Â  Â  Â  Â  Â  Â  Â  Â  taskDueDate.setHours(0, 0, 0, 0); 
Â  Â  Â  Â  Â  Â  Â  Â  selectedDate.setHours(0, 0, 0, 0);
Â  Â  Â  Â  Â  Â  Â  Â  return taskDueDate <= selectedDate;
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  return currentTasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));

Â  Â  }, [tasks, filterStatus, filterPriority, filterDueDate]);
Â  Â  
Â  Â  return (
Â  Â  Â  Â  <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
Â  Â  Â  Â  Â  Â  <Navbar currentUser={user} />
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div className="pt-24 px-6 max-w-7xl mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-bold mb-8">My Tasks</h2>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-8 border border-gray-200 dark:border-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-lg font-medium mb-4">Filter Tasks</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="text-sm font-medium mb-1">Status</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filterStatus}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilterStatus(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {statusOptions.map(status => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={status} value={status}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {status.charAt(0).toUpperCase() + status.slice(1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="text-sm font-medium mb-1">Priority</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filterPriority}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilterPriority(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {priorityOptions.map(priority => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={priority} value={priority}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {priority.charAt(0).toUpperCase() + priority.slice(1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="text-sm font-medium mb-1">Due On/Before</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filterDueDate}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilterDueDate(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {loading && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10">Loading tasks...</div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-red-500">{error}</div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {!loading && !error && filteredTasks.length === 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {tasks.length === 0 ? "You have no tasks assigned to you yet." : "No tasks match the current filters. Try adjusting your selections."}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {!loading && filteredTasks.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {filteredTasks.map(task => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={task._id} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => openDetailModal(task)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition duration-200 cursor-pointer"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-start">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold text-indigo-600 dark:text-indigo-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {task.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`px-3 py-1 text-xs rounded-full ${getStatusClasses(task.status)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {task.status?.charAt(0).toUpperCase() + task.status?.slice(1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400 mt-1 mb-3 line-clamp-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {task.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-500 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Due: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={getPriorityClasses(task.priority)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {task.priority?.charAt(0).toUpperCase() + task.priority?.slice(1)} Priority
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {selectedTask && (
Â  Â  Â  Â  Â  Â  Â  Â  <TaskDetailModal
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isOpen={isDetailModalOpen}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClose={closeDetailModal}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  task={selectedTask}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  backendUrl={backendUrl}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  );
};

export default UserTasks;